{"name":"Dicse","tagline":"A straight-forward translation engine for ASP.NET MVC.","body":"Dicse\r\n=====\r\n\r\nA straight-forward translation engine for ASP.NET MVC.\r\n\r\n## Dependencies\r\n\r\nNewtonsoft.Json >= 5.0.8\r\n\r\n## Installation\r\n\r\nInstall the NuGet package:\r\n\r\n<pre><code>PM&gt; Install-Package Dicse</code></pre>\r\n\r\n## Creating a dictionary\r\n\r\nDicse currently supports two dictionary formats: JSON and XML. Each dictionary contains one language,\r\nand multiple contexts.\r\n\r\nYou'd use the context for translating the same word under different subjects. For instance, the word\r\n`bit` can be interpreted as the basic unit of information in computing or as a tiny piece of something.\r\nThus, you'd use the global context for the default behaviour, and a different context for the specific\r\nmeaning.\r\n\r\nAlso, contexts allow you to group translation keys by subject or by anything that suits you best.\r\n\r\n### The JSON dictionary\r\n\r\n<pre><code>{\r\n  \"Language\": \"es-es\",\r\n  \"Translations\": {\r\n    \"global\": {\r\n      \"Hello\": \"Hola\",\r\n      \"Goodbye\": \"Adiós\",\r\n      \"Hello {0}\": \"Hola {0}\"\r\n    },\r\n    \"family\": {\r\n      \"Hello\": \"Hey, qué tal?\",\r\n      \"Goodbye\": \"Hasta luego!\"\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n### The XML dictionary\r\n<pre><code>&lt;?xml version=\"1.0\">\r\n&lt;translations language=\"es-es\">\r\n  &lt;contexts>\r\n    &lt;context id=\"global\">\r\n      &lt;entry key=\"Hello\" translated=\"Hola\"/>\r\n      &lt;entry key=\"Goodbye\" translated=\"Adiós\"/>\r\n      &lt;entry key=\"Hello {0}\" translated=\"Hola {0}\"/>\r\n    &lt;/context>\r\n    &lt;context id=\"family\">\r\n      &lt;entry key=\"Hello\" translated=\"Hey, qué tal?\"/>\r\n      &lt;entry key=\"Goodbye\" translated=\"Hasta luego!\"/>\r\n    &lt;/context>\r\n  &lt;/contexts>\r\n&lt;/translations>\r\n</code></pre>\r\n\r\n## Configuring Dicse\r\n\r\nIn order for Dicse to work, the dictionaries must be loaded first.\r\n\r\nA recommended way to do this is to create a `TranslatorConfig` class in the `App_Start` folder\r\nof your MVC project, containing the following:\r\n\r\n<pre><code>public class TranslatorConfig\r\n{\r\n    public static void ConfigureTranslations(Translator t)\r\n    {\r\n        // Load a translation file.\r\n        t.LoadFromFile(\"~/Translations/es-ar.json\");\r\n        \r\n        // Set a default language.\r\n        t.DestinationLanguage = \"es-ar\";\r\n    }\r\n}</code></pre>\r\n\r\nAfterwards, you must call the `ConfigureTranslations` method in your `Global.asax` file:\r\n\r\n<pre><code>public class MvcApplication : System.Web.HttpApplication\r\n{\r\n    protected void Application_Start()\r\n    {\r\n        // ... all other inits ...\r\n        \r\n        TranslatorConfig.ConfigureTranslations(JsonTranslator.Default);\r\n        // or\r\n        TranslatorConfig.ConfigureTranslations(XmlTranslator.Default);\r\n    }\r\n}</code></pre>\r\n\r\nIn the `Application_Start` event, you must define which translator engine to use (JSON or XML). *You cannot mix\r\nbetween dictionary formats, you must pick one.*\r\n\r\n## Localizing your text\r\n\r\nTo use Dicse in your views, simply use the `Translate` method in the `Html` helper:\r\n\r\n<pre><code>@Html.Translate(\"Hello\")</code></pre>\r\n\r\nYou can also translate with tokens:\r\n\r\n<pre><code>@Html.Translate(\"Hello {0}\", \"John Doe\")</code></pre>\r\n\r\nIf you need to reference a specifix context, prepend the context name along with a pipe (|) to the translation key:\r\n\r\n<pre><code>@Html.Translate(\"family|Hello\")</code></pre>\r\n\r\nYou must include `@using Dicse.Json;` or `@using Dicse.Xml;` at the top of your view so Razor can recognise the\r\nextension methods of `HtmlHelper`.\r\n\r\n### Optional: Register the Dicse namespace in your Razor Views web.config file\r\n\r\nIf you want to avoid having to add the `@using Dicse.Json;` or `@using Dicse.Xml;` on every view you wish to\r\ntranslate, you must register the Dicse namespace on the `<pages>` section of `Views/web.config`:\r\n\r\n<pre><code>&lt;system.web.webPages.razor>\r\n  &lt;host factoryType=\"System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" />\r\n  &lt;pages pageBaseType=\"System.Web.Mvc.WebViewPage\">\r\n    &lt;namespaces>\r\n      &lt;!-- \r\n      ...\r\n      ...\r\n      other namespaces\r\n      ...\r\n      ... -->\r\n      &lt;add namespace=\"Dicse.Json\" /> &lt;!-- or &lt;add namespace=\"Dicse.Xml\" /> -->\r\n    &lt;/namespaces>\r\n  &lt;/pages>\r\n&lt;/system.web.webPages.razor></code></pre>\r\n\r\n**Important:** If you have your view file open while performing the forementioned changes to the Web.config file,\r\n**close** all view files and then reopen them, otherwise Razor won't recognise the `Translate` method.\r\n\r\n## License\r\n\r\nDicse is licensed under the MIT License.\r\n\r\n## Contribute\r\n\r\nFeel free to fork this project, report issues and propose pull requests!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}